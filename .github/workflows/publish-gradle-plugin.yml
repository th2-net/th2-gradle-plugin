name: publish gradle plugin

on:
  workflow_dispatch:
    inputs:
      sonatype:
        type: boolean
        default: true
        description: "publish plugin to sonatype"
      gradle-portal:
        type: boolean
        default: true
        description: "publish plugin to Gradle Portal"

env:
  VERSION_FILE: gradle.properties
  VERSION_PATTERN: '(?<=version=).+'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      CURRENT_VERSION: ${{ steps.versions.outputs.CURRENT_VERSION }}
      NEXT_VERSION: ${{ steps.versions.outputs.NEXT_VERSION }}
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: Get version
        id: versions
        uses: HardNorth/github-version-generate@v1.4.0
        with:
          version-source: file
          version-file: ${{ env.VERSION_FILE }}
          version-file-extraction-pattern: ${{ env.VERSION_PATTERN }}
  build-gradle-portal:
    if: inputs.gradle-portal
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
          validate-wrappers: 'true'
      - name: Publish plugins to Gradle portal
        run: >
          ./gradlew clean build publishPlugins --info
          -Pgradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }}
          -Pgradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }}
  build-sonatype:
    if: inputs.sonatype
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
          validate-wrappers: 'true'
      - name: Publish plugins to Gradle portal
        run: >
          ./gradlew clean build publishToSonatype closeAndReleaseStagingRepositories --info
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SONATYPE_GPG_ARMORED_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SONATYPE_SIGNING_PASSWORD }}

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-gradle-portal
      - build-sonatype
      - version
    permissions:
      contents: write
    if: ${{ !cancelled() && (needs.build-gradle-portal.result == 'success' || needs.build-sonatype.result == 'success') }}
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: Store SHA of HEAD commit on ENV
        run: echo "GIT_HEAD=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Create tag
        id: create_tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const {GIT_HEAD} = process.env
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ needs.version.outputs.CURRENT_VERSION }}",
              sha: `${GIT_HEAD}`
            })

      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          configuration: changelog_config.json
          toTag: ${{ needs.version.outputs.CURRENT_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1.16.0
        with:
          body: ${{ steps.build_changelog.outputs.changelog }}
          name: Release ${{ needs.version.outputs.CURRENT_VERSION }}
          tag: ${{ needs.version.outputs.CURRENT_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
  update-version:
    if: ${{ !cancelled() }}
    needs:
      - create-release
      - version
    uses: ./.github/workflows/version-update.yml
    with:
     next-version: ${{ needs.version.outputs.NEXT_VERSION }}
     current-version: ${{ needs.version.outputs.CURRENT_VERSION }}
    secrets:
      PUSH_PAT: ${{ secrets.PUSH_PAT }}